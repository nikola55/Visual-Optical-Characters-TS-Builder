/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.builder.ui;

import com.builder.work.Thresholder;
import com.builder.model.Project;
import com.builder.model.Segment;
import com.builder.model.SegmentSet;
import com.builder.model.SlidingWindowState;
import com.builder.work.LineDetector;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Nikola
 */
public class TSBuilderUI extends javax.swing.JFrame {

    /**
     * Creates new form TSBuilderUI
     */
    DefaultListModel model = new DefaultListModel();

    Project project;
    
    static long timeMillisStart = System.currentTimeMillis();

    private Boolean[] segmentsEnabled = {false},
            slidingWindowEnabled = {false};

    ExamplesViewer viewer = new ExamplesViewer(segmentsEnabled);

    public TSBuilderUI() {

        initComponents();
    }

    {
        setFocusable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        projectBuilderDialog = new javax.swing.JDialog(this, true);
        posExFolderTF = new javax.swing.JTextField();
        imgExSeparator = new javax.swing.JSeparator();
        newProjCreateBtn = new javax.swing.JButton();
        negExFolderBtn = new javax.swing.JButton();
        imgExSeparator1 = new javax.swing.JSeparator();
        posExFolderLabel = new javax.swing.JLabel();
        imageOpenBtn = new javax.swing.JButton();
        imgFileLabel = new javax.swing.JLabel();
        negExFolderTF = new javax.swing.JTextField();
        imagePathTF = new javax.swing.JTextField();
        negExFolderLabel = new javax.swing.JLabel();
        posExFolderBtn = new javax.swing.JButton();
        newProjCancelBtn = new javax.swing.JButton();
        progressDialog = new javax.swing.JDialog();
        progDialogProgBar = new javax.swing.JProgressBar();
        progDialogCancelBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        vertScroll = new javax.swing.JScrollBar();
        imageViewer = viewer;
        horizScroll = new javax.swing.JScrollBar();
        thresholdSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        detectLinesStart = new javax.swing.JButton();
        showLinesCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        lineSegmentsList = new javax.swing.JList();
        doSlidingWindow = new javax.swing.JButton();
        recreateLinesBtn = new javax.swing.JButton();
        currentWindowPreview = new SlidingWindowPreview();
        nextWindowState = new javax.swing.JButton();
        prevWindowState = new javax.swing.JButton();
        incrementStepSpinner = new javax.swing.JSpinner();
        negClassBtn = new javax.swing.JButton();
        posClassBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        menuNewProjectButton = new javax.swing.JMenuItem();
        menuOpenProjectButton = new javax.swing.JMenuItem();
        menuSaveProjectButton = new javax.swing.JMenuItem();

        projectBuilderDialog.setBounds(0, 0, 500, 300);
        projectBuilderDialog.setResizable(false);
        projectBuilderDialog.setModal(true);
        projectBuilderDialog.setName("Create New Project"); // NOI18N

        newProjCreateBtn.setText("Create");
        newProjCreateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newProjCreateBtnMouseClicked(evt);
            }
        });

        negExFolderBtn.setText("Open File");
        negExFolderBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                negExFolderBtnMouseClicked(evt);
            }
        });

        posExFolderLabel.setText("+ Examples Folder");

        imageOpenBtn.setText("Open File");
        imageOpenBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageOpenBtnMouseClicked(evt);
            }
        });

        imgFileLabel.setText("Image File");

        negExFolderLabel.setText("- Examples Folder");

        posExFolderBtn.setText("Open File");
        posExFolderBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                posExFolderBtnMouseClicked(evt);
            }
        });

        newProjCancelBtn.setText("Cancel");
        newProjCancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newProjCancelBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout projectBuilderDialogLayout = new javax.swing.GroupLayout(projectBuilderDialog.getContentPane());
        projectBuilderDialog.getContentPane().setLayout(projectBuilderDialogLayout);
        projectBuilderDialogLayout.setHorizontalGroup(
            projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addComponent(imagePathTF)
                        .addGap(30, 30, 30)
                        .addComponent(imageOpenBtn))
                    .addComponent(imgExSeparator)
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addComponent(posExFolderTF, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(posExFolderBtn))
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addComponent(negExFolderTF, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(negExFolderBtn))
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addGroup(projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imgFileLabel)
                            .addComponent(posExFolderLabel)
                            .addComponent(negExFolderLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(imgExSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, projectBuilderDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(newProjCancelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(newProjCreateBtn)))
                .addContainerGap())
        );
        projectBuilderDialogLayout.setVerticalGroup(
            projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(imageOpenBtn)
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addComponent(imgFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imagePathTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imgExSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(posExFolderBtn)
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addComponent(posExFolderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(posExFolderTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(negExFolderBtn)
                    .addGroup(projectBuilderDialogLayout.createSequentialGroup()
                        .addComponent(negExFolderLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(negExFolderTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addComponent(imgExSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projectBuilderDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newProjCancelBtn)
                    .addComponent(newProjCreateBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        progressDialog.setMinimumSize(new java.awt.Dimension(400, 120));
        progressDialog.setModal(true);

        progDialogCancelBtn.setText("Cancel");

        javax.swing.GroupLayout progressDialogLayout = new javax.swing.GroupLayout(progressDialog.getContentPane());
        progressDialog.getContentPane().setLayout(progressDialogLayout);
        progressDialogLayout.setHorizontalGroup(
            progressDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(progressDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progDialogProgBar, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, progressDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(progDialogCancelBtn)))
                .addContainerGap())
        );
        progressDialogLayout.setVerticalGroup(
            progressDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(progressDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progDialogProgBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progDialogCancelBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyTyped(evt);
            }
        });

        vertScroll.setBlockIncrement(0);
        vertScroll.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                yAdjustment(evt);
            }
        });

        imageViewer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout imageViewerLayout = new javax.swing.GroupLayout(imageViewer);
        imageViewer.setLayout(imageViewerLayout);
        imageViewerLayout.setHorizontalGroup(
            imageViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        imageViewerLayout.setVerticalGroup(
            imageViewerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        horizScroll.setBlockIncrement(1);
        horizScroll.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        horizScroll.setToolTipText("");
        horizScroll.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                xAdjustement(evt);
            }
        });

        thresholdSlider.setMaximum(255);
        thresholdSlider.setValue(127);
        thresholdSlider.setEnabled(false);
        thresholdSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thresholdSliderStateChanged(evt);
            }
        });

        jLabel1.setText("Threshold");

        detectLinesStart.setText("Detect Lines");
        detectLinesStart.setEnabled(false);
        detectLinesStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detectLinesStartMouseClicked(evt);
            }
        });

        showLinesCheckBox.setText("Show Lines");
        showLinesCheckBox.setEnabled(false);
        showLinesCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setShowLinesEnabled(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(imageViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(vertScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(showLinesCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(detectLinesStart))
                            .addComponent(horizScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(thresholdSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageViewer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vertScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(horizScroll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detectLinesStart)
                    .addComponent(showLinesCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lineSegmentsList.setModel(new DefaultListModel<Segment>());
        lineSegmentsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lineSegmentsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lineSegmentsList);

        doSlidingWindow.setText("Sliding Window");
        doSlidingWindow.setEnabled(false);
        doSlidingWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doSlidingWindowMouseClicked(evt);
            }
        });

        recreateLinesBtn.setText("Dismiss Lines");
        recreateLinesBtn.setEnabled(false);

        currentWindowPreview.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        currentWindowPreview.setPreferredSize(new java.awt.Dimension(200, 200));

        javax.swing.GroupLayout currentWindowPreviewLayout = new javax.swing.GroupLayout(currentWindowPreview);
        currentWindowPreview.setLayout(currentWindowPreviewLayout);
        currentWindowPreviewLayout.setHorizontalGroup(
            currentWindowPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );
        currentWindowPreviewLayout.setVerticalGroup(
            currentWindowPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 198, Short.MAX_VALUE)
        );

        nextWindowState.setText("Next");
        nextWindowState.setEnabled(false);
        nextWindowState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextWindowStateMouseClicked(evt);
            }
        });

        prevWindowState.setText("Previous");
        prevWindowState.setEnabled(false);
        prevWindowState.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prevWindowStateMouseClicked(evt);
            }
        });

        incrementStepSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(2), Integer.valueOf(1), null, Integer.valueOf(1)));
        incrementStepSpinner.setEnabled(false);
        incrementStepSpinner.setValue(2);
        incrementStepSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                incrementStepSpinnerStateChanged(evt);
            }
        });

        negClassBtn.setText("Neg. Class");
        negClassBtn.setEnabled(false);
        negClassBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                negClassBtnMouseClicked(evt);
            }
        });

        posClassBtn.setText("Pos. Class");
        posClassBtn.setEnabled(false);
        posClassBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                posClassBtnMouseClicked(evt);
            }
        });

        mainMenu.setText("File");

        menuNewProjectButton.setText("New");
        menuNewProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewProjectButtonActionPerformed(evt);
            }
        });
        mainMenu.add(menuNewProjectButton);

        menuOpenProjectButton.setText("Open");
        mainMenu.add(menuOpenProjectButton);

        menuSaveProjectButton.setText("Save");
        mainMenu.add(menuSaveProjectButton);

        jMenuBar1.add(mainMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doSlidingWindow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(recreateLinesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 23, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(negClassBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(posClassBtn))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(currentWindowPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(prevWindowState)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(incrementStepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nextWindowState, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(24, 24, 24)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doSlidingWindow)
                            .addComponent(recreateLinesBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(negClassBtn)
                            .addComponent(posClassBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(currentWindowPreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextWindowState)
                            .addComponent(prevWindowState)
                            .addComponent(incrementStepSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuNewProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewProjectButtonActionPerformed
        projectBuilderDialog.setVisible(true);
    }//GEN-LAST:event_menuNewProjectButtonActionPerformed

    private void thresholdSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thresholdSliderStateChanged
        if (this.project == null) {
            return;
        }

        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {

            int thsVal = source.getValue();

            Thresholder thser = new Thresholder(project.getImage(), source.getMaximum() - thsVal, viewer);

            thser.start();

        }
    }//GEN-LAST:event_thresholdSliderStateChanged

    private void xAdjustement(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_xAdjustement
        viewer.setVisibleSpace(evt.getValue(), -1);
        viewer.repaint();
    }//GEN-LAST:event_xAdjustement

    private void yAdjustment(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_yAdjustment
        viewer.setVisibleSpace(-1, evt.getValue());
        viewer.repaint();
    }//GEN-LAST:event_yAdjustment

    private void showErrorDialog(String errorMessage, String dialogTitle) {

        JOptionPane.showMessageDialog(this,
                errorMessage,
                dialogTitle,
                JOptionPane.ERROR_MESSAGE);

    }

    private void newProjCreateBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newProjCreateBtnMouseClicked

        String outputPosDir = posExFolderTF.getText().trim(),
                outputNegDir = negExFolderTF.getText().trim(),
                imageFileName = imagePathTF.getText().trim();

        File imageFile = new File(imageFileName);
        if (imageFile.isDirectory() || !new ImageFilter().accept(imageFile)) {

            showErrorDialog("Image file not set to a valid path", "Project create error");
            return;

        }

        File outputPosDirFile = new File(outputPosDir);
        if (!outputPosDirFile.isDirectory()) {

            showErrorDialog("+ Examples folder not set to a valid path", "Project create error");
            return;

        }

        File outputNegDirFile = new File(outputNegDir);
        if (!outputNegDirFile.isDirectory()) {

            showErrorDialog("- Examples folder not set to a valid path", "Project create error");
            return;

        }

        this.project = new Project(outputPosDirFile, outputNegDirFile, imageFile);

        viewer.setProject(project);
        viewer.repaint();

        int thsVal = thresholdSlider.getMaximum() - thresholdSlider.getValue();

        Thresholder t = new Thresholder(this.project.getImage(), thsVal, viewer);

        t.start();

        projectBuilderDialog.setVisible(false);
        thresholdSlider.setEnabled(true);
        detectLinesStart.setEnabled(true);
    }//GEN-LAST:event_newProjCreateBtnMouseClicked

    private void negExFolderBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_negExFolderBtnMouseClicked
        fileChooser.setFileFilter(new DirOnlyFilter());
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int retVal = fileChooser.showOpenDialog(this);

        if (retVal == JFileChooser.APPROVE_OPTION) {

            File negDir = fileChooser.getSelectedFile();
            String posDirFileName = negDir.getAbsolutePath();
            negExFolderTF.setText(posDirFileName);

        }
    }//GEN-LAST:event_negExFolderBtnMouseClicked

    private void imageOpenBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageOpenBtnMouseClicked

        fileChooser.setFileFilter(new ImageFilter());
        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {

            final File file = fileChooser.getSelectedFile();
            String fileName = file.getAbsolutePath();
            imagePathTF.setText(fileName);

        }
    }//GEN-LAST:event_imageOpenBtnMouseClicked

    private void posExFolderBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_posExFolderBtnMouseClicked

        fileChooser.setFileFilter(new DirOnlyFilter());
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int retVal = fileChooser.showOpenDialog(this);

        if (retVal == JFileChooser.APPROVE_OPTION) {

            File posDir = fileChooser.getSelectedFile();
            String posDirFileName = posDir.getAbsolutePath();
            posExFolderTF.setText(posDirFileName);
        }

    }//GEN-LAST:event_posExFolderBtnMouseClicked

    private void newProjCancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newProjCancelBtnMouseClicked
        projectBuilderDialog.setVisible(false);
    }//GEN-LAST:event_newProjCancelBtnMouseClicked

    private void detectLinesStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detectLinesStartMouseClicked

        if (!((JButton) evt.getSource()).isEnabled()) {
            return;
        }

        thresholdSlider.setEnabled(false);

        new Thread(new LineDetector(this.project, this.progDialogProgBar, progressDialog)).start();

        progressDialog.setVisible(true);
        setSlidingWindowOptionsEnabled();

        segmentsEnabled[0] = true;
        viewer.repaint();
    }

    private void setSlidingWindowOptionsEnabled() {

        showLinesCheckBox.setEnabled(true);
        showLinesCheckBox.setSelected(true);
        doSlidingWindow.setEnabled(true);
        recreateLinesBtn.setEnabled(true);

        lineSegmentsList.setModel(project.getLineSegments());
        lineSegmentsList.revalidate();
    }//GEN-LAST:event_detectLinesStartMouseClicked

    private void setShowLinesEnabled(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setShowLinesEnabled

        if (!showLinesCheckBox.isEnabled()) {
            return;
        }

        if (showLinesCheckBox.isSelected()) {

            this.segmentsEnabled[0] = true;

        } else {

            this.segmentsEnabled[0] = false;

        }

    }//GEN-LAST:event_setShowLinesEnabled

    private void doSlidingWindowMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doSlidingWindowMouseClicked

        Segment lineSeg = (Segment) lineSegmentsList.getSelectedValue();
        SlidingWindowState state = new SlidingWindowState(lineSeg, 2);
        project.setSlidingWindowState(state);
        Segment currentState = state.next();
        setWindowPreview(currentState);
        setEnabledSlidingWindowForm();
        slidingWindowEnabled[0] = true;

    }

    private void setEnabledSlidingWindowForm() {
        prevWindowState.setEnabled(true);
        nextWindowState.setEnabled(true);
        posClassBtn.setEnabled(true);
        negClassBtn.setEnabled(true);
        incrementStepSpinner.setEnabled(true);
    }

    private void setWindowPreview(Segment state) {

        Rectangle segRec = state.getCoords();
        System.out.println("Current SubImage = " + segRec);

        BufferedImage image = project.getOriginalImage();
        BufferedImage sub = image.getSubimage(segRec.x, segRec.y, segRec.width, segRec.height);

        SlidingWindowPreview previewPane = (SlidingWindowPreview) currentWindowPreview;
        previewPane.setCurrentImage(sub);

        previewPane.repaint();

    }//GEN-LAST:event_doSlidingWindowMouseClicked

    private void nextWindowStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextWindowStateMouseClicked
        moveNextWindowState();
    }//GEN-LAST:event_nextWindowStateMouseClicked

    private void moveNextWindowState() {

        SlidingWindowState state = project.getSlidingWindowState();
        setWindowPreview(state.next());

    }

    private void prevWindowStateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevWindowStateMouseClicked
        movePreviousWindowState();
    }//GEN-LAST:event_prevWindowStateMouseClicked

    private void movePreviousWindowState() {

        SlidingWindowState state = project.getSlidingWindowState();
        setWindowPreview(state.previous());

    }

    private void incrementStepSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_incrementStepSpinnerStateChanged

        if (project == null) {
            return;
        }

        if (project.getSlidingWindowState() == null) {
            return;
        }

        int incStep = (int) incrementStepSpinner.getValue();

        project.getSlidingWindowState().setIncrementStep(incStep);

    }//GEN-LAST:event_incrementStepSpinnerStateChanged

    private void posClassBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_posClassBtnMouseClicked

        saveExample(project.getPosExDir());

    }//GEN-LAST:event_posClassBtnMouseClicked

    private void negClassBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_negClassBtnMouseClicked

        saveExample(project.getNegExDir());

    }//GEN-LAST:event_negClassBtnMouseClicked


    private void lineSegmentsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lineSegmentsListValueChanged

        if (project == null) {
            return;
        }

        SegmentSet ss = project.getLineSegments();

        if (ss == null) {
            return;
        }

        for (Segment s : ss) {
            s.setIsSelected(false);
        }

        Segment s = (Segment) lineSegmentsList.getSelectedValue();

        s.setIsSelected(true);

        imageViewer.repaint();
        
    }//GEN-LAST:event_lineSegmentsListValueChanged

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        System.out.println("Focus gained");
    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        System.out.println("Focus lost");
    }//GEN-LAST:event_formFocusLost

    private void formKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyTyped

        int keyKode = evt.getKeyCode();
        System.out.println(keyKode);

        if (!slidingWindowEnabled[0]) {
            return;
        }

        if (keyKode == 37) { // LeftArrow

            movePreviousWindowState();

        } else if (keyKode == 39) {// RightArrow

            moveNextWindowState();

        } else if (keyKode == 49) { // Char '1'

            saveExample(project.getPosExDir());

        } else if (keyKode == 50) { // Char '2'

            saveExample(project.getNegExDir());

        }

    }//GEN-LAST:event_formKeyTyped

    private void saveExample(File folder) {

        Segment currentSegment = project.getSlidingWindowState().current();
        Rectangle rec = currentSegment.getCoords();
        
        
        
        String fileName = String.format("x%dy%d_%d.jpg", rec.x, rec.y, timeMillisStart);

        try {

            BufferedImage imgToSave = project.getOriginalImage().getSubimage(rec.x, rec.y, rec.width, rec.height);

            ImageIO.write(imgToSave, "jpg", new File(folder, fileName));

        } catch (IOException e) {

            e.printStackTrace();

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TSBuilderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TSBuilderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TSBuilderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TSBuilderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TSBuilderUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel currentWindowPreview;
    private javax.swing.JButton detectLinesStart;
    private javax.swing.JButton doSlidingWindow;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JScrollBar horizScroll;
    private javax.swing.JButton imageOpenBtn;
    private javax.swing.JTextField imagePathTF;
    private javax.swing.JPanel imageViewer;
    private javax.swing.JSeparator imgExSeparator;
    private javax.swing.JSeparator imgExSeparator1;
    private javax.swing.JLabel imgFileLabel;
    private javax.swing.JSpinner incrementStepSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList lineSegmentsList;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuItem menuNewProjectButton;
    private javax.swing.JMenuItem menuOpenProjectButton;
    private javax.swing.JMenuItem menuSaveProjectButton;
    private javax.swing.JButton negClassBtn;
    private javax.swing.JButton negExFolderBtn;
    private javax.swing.JLabel negExFolderLabel;
    private javax.swing.JTextField negExFolderTF;
    private javax.swing.JButton newProjCancelBtn;
    private javax.swing.JButton newProjCreateBtn;
    private javax.swing.JButton nextWindowState;
    private javax.swing.JButton posClassBtn;
    private javax.swing.JButton posExFolderBtn;
    private javax.swing.JLabel posExFolderLabel;
    private javax.swing.JTextField posExFolderTF;
    private javax.swing.JButton prevWindowState;
    private javax.swing.JButton progDialogCancelBtn;
    private javax.swing.JProgressBar progDialogProgBar;
    private javax.swing.JDialog progressDialog;
    private javax.swing.JDialog projectBuilderDialog;
    private javax.swing.JButton recreateLinesBtn;
    private javax.swing.JCheckBox showLinesCheckBox;
    private javax.swing.JSlider thresholdSlider;
    private javax.swing.JScrollBar vertScroll;
    // End of variables declaration//GEN-END:variables

    private static class DirOnlyFilter extends FileFilter {

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) {
                return true;
            } else {
                return false;
            }
        }

        @Override
        public String getDescription() {

            return "Directory";

        }
    }
}
